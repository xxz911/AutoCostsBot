"""–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""


from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import BotBlocked
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from settings import API_TOKEN
from messages import *
from keyboards import *
from utils import *
from exceptions import *

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# logging.basicConfig(level=logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(_):
    print('___–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!___')


# –í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    f_name = message.from_user.first_name
    await message.answer(
        text=get_start_message(f_name),
        parse_mode="HTML",
        reply_markup=kb
    )
    await send_help(message=message)
    await send_main(message=message)


# –ö–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def send_main(message: types.Message) -> None:
    await message.answer(text="üìù–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", reply_markup=kb)
    await message.delete()


# –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(Text(equals='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def send_statistic(message: types.Message) -> None:
    await message.answer(text="‚òëÔ∏è–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", reply_markup=kb_statistic)
    await message.delete()


# –ö–Ω–æ–ø–∫–∞ –ü–æ–º–æ—â—å
@dp.message_handler(Text(equals='üÜò–ü–æ–º–æ—â—å'))
async def send_help(message: types.Message) -> None:
    await message.answer(
        text=HELP_MESSAGE,
        parse_mode="HTML",
        reply_markup=kb
    )


# –ö–Ω–æ–ø–∫–∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç
@dp.message_handler(Text(equals='üå°Ô∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç'))
async def send_limit(message: types.Message) -> None:
    await message.answer(text=LIMIT_MESSAGE, reply_markup=kb_main)
    await message.delete()


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã
@dp.message_handler(lambda message: Filter.is_handler_limit(message.text))
async def set_limit(message: types.Message) -> None:
    data = LimitData(message.text)
    await message.reply(text=f'‚úÖ–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {data.limit} —Ä—É–±. –≤ {data.time}.',
                        reply_markup=kb
                        )


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç
@dp.message_handler(lambda message: Filter.is_handler_cost(message.text))
async def set_cost(message: types.Message) -> None:
    data = CostData(message.text)
    text = get_cost_message(data)
    await message.reply(text=text, reply_markup=kb)


@dp.message_handler(content_types=types.ContentType.ANY)
async def do_echo(message: types.Message) -> None:
    text = BAD_TEXT_MESSAGE if message.text else NOT_TEXT_MESSAGE
    await message.reply(text=text, reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞ –ø—Ä–∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
@dp.errors_handler(exception=BotBlocked)
async def err_bot_blocked_handler(update: types.Update, exception: BotBlocked) -> bool:
    return True


# –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
