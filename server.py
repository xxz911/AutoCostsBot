"""–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"""


import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import BotBlocked

from settings import API_TOKEN
from messages import *
from keyboards import kb, kb_statistic
from utils import Filter, CostData
from sqlite import db_create
from utils_db import db_is_ready, get_limit, set_limit

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
file_log = logging.FileHandler("log.log")
console_out = logging.StreamHandler()
logging.basicConfig(handlers=(file_log, console_out), level=logging.ERROR, format="%(asctime)s %(levelname)s |  %(lineno)d %(funcName)s: %(message)s")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def on_startup(_):
    await db_create()
    print('___–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!___')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–°—Ç–∞—Ä—Ç'
@dp.message_handler(commands=['start'])
async def cmd_send_welcome(message: types.Message) -> None:
    try:
        await db_is_ready(message)
        await cmd_send_help(message=message)
    except:
        await message.answer(
            text=PROBLEM_MESSAGE,
            reply_markup=kb
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def cmd_send_main(message: types.Message) -> None:
    await message.answer(text="üìù–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã", reply_markup=kb)
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
@dp.message_handler(Text(equals='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def cmd_send_statistic(message: types.Message) -> None:
    await message.answer(text="‚òëÔ∏è–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", reply_markup=kb_statistic)
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'
@dp.message_handler(Text(equals='üÜò–ü–æ–º–æ—â—å'))
async def cmd_send_help(message: types.Message) -> None:
    await message.answer(
        text=HELP_MESSAGE,
        parse_mode="HTML",
        reply_markup=kb
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç'
@dp.message_handler(Text(equals='üå°Ô∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç'))
async def cmd_send_limit(message: types.Message) -> None:
    await get_limit(message)
    await message.delete()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã
@dp.message_handler(lambda message: Filter.is_handler_limit(message.text))
async def cmd_set_limit(message: types.Message) -> None:
    await set_limit(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler(lambda message: Filter.is_handler_cost(message.text))
async def cmd_set_cost(message: types.Message) -> None:
    data = CostData(message.text)
    text = get_done_cost_message(data)
    await message.reply(text=text, reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.ANY)
async def cmd_exceptions(message: types.Message) -> None:
    text = BAD_TEXT_MESSAGE if message.text else NOT_TEXT_MESSAGE
    await message.reply(text=text, reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞ –ø—Ä–∏ –µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
@dp.errors_handler(exception=BotBlocked)
async def err_bot_blocked_handler(update: types.Update, exception: BotBlocked) -> bool:
    return True


# –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
